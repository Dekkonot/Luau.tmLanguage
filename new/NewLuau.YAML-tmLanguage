---
name: Luau
scopeName: source.luau
fileTypes: [luau, lua]

variables:
  startOfIdentifier: (?<![_$[:alnum:]])(?:(?<=\.\.\.)|(?<!\.))
  endOfIdentifier: (?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))
  identifier: "[_$[:alpha:]][_$[:alnum:]]*"
  constantIdentifier: "[[:upper:]][_$[:digit:][:upper:]]*"
  constantVar: ({{constantIdentifier}})(?![_$[:alnum:]])
  propertyAccess: (?:(\.)|(\?\.(?!\s*[[:digit:]])))

patterns:
  - include: "#statements"
  - include: "#shebang"

repository:
  shebang:
    name: comment.line.shebang.luau
    match: \A(#!).*(?=$)
    captures:
      "1": { name: punctuation.definition.comment.luau }

  statements:
    patterns:
      - include: "#declaration"
      - include: "#control-statement"
      - include: "#expression"
      - include: "#punctuation-semicolon"
      - include: "#string"
      - include: "#comment"

  # control statement keywords
  control-statement:
    patterns:
      - name: keyword.control.luau
        match: "{{startOfIdentifier}}(break|continue|return|do|while|end|repeat|until|for|in){{endOfIdentifier}}"
      - name: keyword.control.conditional.luau
        match: "{{startOfIdentifier}}(else|elseif|if|then){{endOfIdentifier}}"

  # declarations
  declaration:
    patterns:
      - include: "#function-declaration"
      - include: "#var-expr"
      - include: "#type-alias-declaration"

  var-expr:
    begin: "{{startOfIdentifier}}(local)\\s+{{endOfIdentifier}}"
    end: "(?=\\s*do\\b|\\s*[=;]|\\s*$)"
    beginCaptures:
      "1": { name: storage.modifier.local.luau }
    patterns:
      - name: keyword.operator.type.luau
        match: ":"
      - include: "#identifiers"
      - include: "#type"

  identifiers:
    # const
    - name: variable.other.constant.ts
      match: "{{constantVar}}"
    # vars
    - name: variable.other.readwrite.ts
      match: "{{identifier}}"

  function-declaration:
    name: meta.function.luau
    begin: '{{startOfIdentifier}}(?:(local)\s+)?(function\b)(?:(?:\s+|(?<=\*))({{identifier}}))?\s*'
    beginCaptures:
      "1": { name: storage.modifier.local.luau }
      "2": { name: storage.type.function.luau }
      "3": { name: meta.definition.function.luau entity.name.function.luau }
    end: (?={{endOfStatement}})|(?<=\})
    patterns:
      - include: "#function-name"
      - include: "#function-body"

  function-body:
    patterns:
      - include: "#comment"
      - include: "#type-parameters"
      - include: "#function-parameters"
      - include: "#return-type"
    # - include: '#type-function-return-type'
    # - include: '#decl-block'

  # expressions
  # expression:

  # types
  type:
    patterns:
      - include: "#comment"
      - include: "#string"
      - include: "#type-primitive"
      - include: "#type-builtin-literals"
      - include: "#type-parameters"
      - include: "#type-tuple"
      - include: "#type-table"
      - include: "#type-operators"
      - include: "#type-name"

  type-primitive:
    name: support.type.primitive.luau
    match: "{{startOfIdentifier}}(string|number|boolean|nil|any|never|unknown){{endOfIdentifier}}"

  type-builtin-literals:
    name: support.type.builtin.luau
    match: "{{startOfIdentifier}}(true|false){{endOfIdentifier}}"

  type-typeof:
    begin: "{{startOfIdentifier}}typeof{{endOfIdentifier}}(\\()"
    beginCaptures:
      "0": { name: keyword.operator.expression.typeof.luau }
      "1": { name: meta.brace.round.luau }
    end: \)
    endCaptures:
      "0": { name: meta.brace.round.luau }
    patterns:
      - include: "#expression"

  type-operators:
    patterns:
      - begin: '[&|\?]'
        beginCaptures:
          "0": { name: keyword.operator.type.luau }

  type-name:
    patterns:
      # module.type<
      - begin: '({{identifier}})\s*{{propertyAccess}}\s*(<)'
        captures:
          "1": { name: entity.name.type.module.luau }
          "2": { name: punctuation.accessor.luau }
          "3": { name: punctuation.accessor.optional.luau }
          "4":
            {
              name: meta.type.parameters.luau punctuation.definition.typeparameters.begin.luau,
            }
        end: "(>)"
        endCaptures:
          "1":
            {
              name: meta.type.parameters.luau punctuation.definition.typeparameters.end.luau,
            }
        contentName: meta.type.parameters.luau
        patterns:
          - include: "#type-arguments-body"
      # type<
      - begin: '({{identifier}})\s*(<)'
        beginCaptures:
          "1": { name: entity.name.type.luau }
          "2":
            {
              name: meta.type.parameters.luau punctuation.definition.typeparameters.begin.luau,
            }
        end: "(>)"
        endCaptures:
          "1":
            {
              name: meta.type.parameters.luau punctuation.definition.typeparameters.end.luau,
            }
        contentName: meta.type.parameters.luau
        patterns:
          - include: "#type-arguments-body"
      # module.type
      - match: ({{identifier}})\s*{{propertyAccess}}
        captures:
          "1": { name: entity.name.type.module.luau }
          "2": { name: punctuation.accessor.luau }
          "3": { name: punctuation.accessor.optional.luau }
      # type
      - name: entity.name.type.luau
        match: "{{identifier}}"

  type-tuple:
    name: meta.type.tuple.luau
    begin: \(
    beginCaptures:
      "0": { name: meta.brace.round.luau }
    end: \)
    endCaptures:
      "0": { name: meta.brace.round.luau }
    patterns:
      - name: keyword.operator.rest.luau
        match: \.\.\.
      - include: "#type"
      - include: "#punctuation-comma"

  type-parameters:
    name: meta.type.parameters.luau
    begin: "(<)"
    beginCaptures:
      "1": { name: punctuation.definition.typeparameters.begin.luau }
    end: "(>)"
    endCaptures:
      "1": { name: punctuation.definition.typeparameters.end.luau }
    patterns:
      - include: "#comment"
      - include: "#type"
      - include: "#punctuation-comma"
      - name: keyword.operator.assignment.luau
        match: (=)(?!>)

  type-table:
    name: meta.table.type.luau
    begin: \{
    beginCaptures:
      "0": { name: punctuation.definition.table.luau }
    end: \}
    endCaptures:
      "0": { name: punctuation.definition.table.luau }
    patterns:
      - include: "#comment"
      - include: "#indexer-declaration"
      - include: "#type-field"
      - include: "#punctuation-comma"
      - include: "#punctuation-semicolon"
      - include: "#type"

  indexer-declaration:
    name: meta.indexer.declaration.luau
    begin: \[
    beginCaptures:
      "0": { name: meta.brace.square.luau }
    end: \]
    endCaptures:
      "0": { name: meta.brace.square.luau }
    patterns:
      - include: "#type-annotation"

  # TODO: type-field

  return-type:
    patterns:
      # if type starts on same line use end of line as end
      - name: meta.return.type.luau
        begin: (?<=\))\s*(:)(?=\s*\S)
        beginCaptures:
          "1": { name: keyword.operator.type.annotation.luau }
        end: (?<![:|&])(?=$|^|[{};,]|//)
        patterns:
          - include: "#type"
      # if type starts on next line use modified line endings as end of type annotation eg. complete empty line
      - name: meta.return.type.luau
        begin: (?<=\))\s*(:)
        beginCaptures:
          "1": { name: keyword.operator.type.annotation.luau }
        end: (?<![:|&])((?=[{};,]|//|^\s*$)|((?<=\S)(?=\s*$)))
        patterns:
          - include: "#type"

  # strings
  string:
    patterns:
      - include: "#string-singlequote"
      - include: "#string-doublequote"
      - include: "#string-brackets"
      - include: "#string-interpolated"

  string-singlequote:
    name: string.quoted.single.luau
    begin: "'"
    beginCaptures:
      "0": { name: punctuation.definition.string.begin.luau }
    end: (\')|((?:[^\\\n])$)
    endCaptures:
      "1": { name: punctuation.definition.string.end.luau }
      "2": { name: invalid.illegal.newline.luau }
    patterns:
      - include: "#string-character-escape"

  string-doublequote:
    name: string.quoted.double.luau
    begin: '"'
    beginCaptures:
      "0": { name: punctuation.definition.string.begin.luau }
    end: '(")|((?:[^\\\n])$)'
    endCaptures:
      "1": { name: punctuation.definition.string.end.luau }
      "2": { name: invalid.illegal.newline.luau }
    patterns:
      - include: "#string-character-escape"

  string-character-escape:
    # TODO: update this for Luau
    name: constant.character.escape.luau
    match: \\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\{[0-9A-Fa-f]+\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)

  # TODO: string-interpolated

  # punctuation
  punctuation-comma:
    name: punctuation.separator.comma.luau
    match: ","

  punctuation-semicolon:
    name: punctuation.terminator.statement.luau
    match: ";"

  # comments
  comment:
    patterns:
      - name: comment.block.luau
        begin: "--\\[(=*)\\["
        end: "\\]\\1\\]"
        # TODO: highlight inline code within comment?
      - name: comment.line.double-dash.luau
        begin: "--"
        end: "\\n"
